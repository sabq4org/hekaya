// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(READER)
  bio           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  posts    Post[]
  comments Comment[]
  auditLogs AuditLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  summary     String?
  content     String      @db.Text
  status      PostStatus  @default(DRAFT)
  coverImage  String?
  authorId    String
  sectionId   String?
  publishedAt DateTime?
  readingTime Int?        @default(0)
  views       Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  author   User      @relation(fields: [authorId], references: [id])
  section  Section?  @relation(fields: [sectionId], references: [id])
  tags     PostTag[]
  comments Comment[]
  media    PostMedia[]

  @@index([status, publishedAt])
  @@index([authorId])
  @@index([sectionId])
}

model Section {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  parentId    String?
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  parent   Section?  @relation("SectionHierarchy", fields: [parentId], references: [id])
  children Section[] @relation("SectionHierarchy")
  posts    Post[]
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  color     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  posts PostTag[]
}

model PostTag {
  postId String
  tagId  String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
}

model Comment {
  id          String        @id @default(cuid())
  content     String        @db.Text
  authorName  String
  authorEmail String
  authorId    String?
  postId      String
  parentId    String?
  status      CommentStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  author   User?     @relation(fields: [authorId], references: [id])
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")

  @@index([postId])
  @@index([status])
}

model Media {
  id          String    @id @default(cuid())
  url         String
  type        MediaType
  alt         String?
  width       Int?
  height      Int?
  size        Int?
  filename    String
  mimeType    String
  uploadedBy  String
  createdAt   DateTime  @default(now())

  posts PostMedia[]
}

model PostMedia {
  postId  String
  mediaId String

  post  Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@id([postId, mediaId])
}

model Setting {
  key       String   @id
  value     String   @db.Text
  type      String   @default("string")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id        String              @id @default(cuid())
  email     String              @unique
  status    SubscriptionStatus  @default(ACTIVE)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

model AuditLog {
  id        String   @id @default(cuid())
  actorId   String
  action    String
  target    String
  meta      Json?
  createdAt DateTime @default(now())

  actor User @relation(fields: [actorId], references: [id])

  @@index([actorId])
  @@index([action])
  @@index([createdAt])
}

enum Role {
  ADMIN
  EDITOR
  AUTHOR
  READER
}

enum PostStatus {
  DRAFT
  IN_REVIEW
  SCHEDULED
  PUBLISHED
  ARCHIVED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  SPAM
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum SubscriptionStatus {
  ACTIVE
  UNSUBSCRIBED
  BOUNCED
}
